Brute Force-

public class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            boolean leftOk = (i == 0 || nums[i] > nums[i - 1]);
            boolean rightOk = (i == n - 1 || nums[i] > nums[i + 1]);

            if (leftOk && rightOk) {
                return i;
            }
        }

        return -1; // This should never happen, since a peak is guaranteed
    }
}



Optimal Solution-

 
class Solution {
    public int findPeakElement(int[] nums) {
        int n=nums.length;
        if(n==1){
            return 0;
        }
        if(nums[0]>nums[1]){
            return 0;
        }
        if(nums[n-1]>nums[n-2]){
             return n-1;
        }
        int low=1;
        int high=n-2;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]){
                return mid;
            }
            else if(nums[mid]>nums[mid-1]){
                low=mid+1;
            }
            else {
                high=mid-1;
            }
        }
   
        return -1;
    }
}
