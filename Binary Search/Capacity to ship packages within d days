A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10




brute force 

import java.util.Arrays;

class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int low = Arrays.stream(weights).max().getAsInt(); // min possible capacity
        int high = Arrays.stream(weights).sum();           // max possible capacity

        // Brute-force loop from low to high capacity
        for (int capacity = low; capacity <= high; capacity++) {
            int daysRequired = getDays(weights, capacity);
            if (daysRequired <= days) {
                return capacity; // first valid capacity
            }
        }
        return -1; // should never reach here if input is valid
    }

    public int getDays(int[] weights, int capacity) {
        int days = 1;
        int load = 0;

        for (int weight : weights) {
            if (load + weight > capacity) {
                days++;
                load = 0;
            }
            load += weight;
        }

        return days;
    }
}





optimal
