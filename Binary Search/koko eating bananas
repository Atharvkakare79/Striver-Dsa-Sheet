class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int high = findMaximum(piles);
        int low = 1;
        int ans = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            long totalHours = calc(piles, mid);

            if (totalHours <= h) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }

    public static long calc(int[] piles, int mid) {
        long totalHours = 0;
        for (int pile : piles) {
            totalHours += (pile + mid - 1L) / mid; //Math.ceil(nums[pile]/mid)
        }
        return totalHours;
    }

    public static int findMaximum(int[] array) {
        int max = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];
            }
        }
        return max;
    }
}

