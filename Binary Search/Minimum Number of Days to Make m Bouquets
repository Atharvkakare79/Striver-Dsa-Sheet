class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        long total = (long) m * k;  // total flowers required to form m bouquets
        if (bloomDay.length < total) {  // Not enough flowers
            return -1;
        }

        int left = Integer.MAX_VALUE;
        int right = Integer.MIN_VALUE;

        // Finding the minimum and maximum bloom days
        for (int day : bloomDay) {
            left = Math.min(left, day);  // minimum bloom day
            right = Math.max(right, day);  // maximum bloom day
        }

        int answer = -1;
        // Perform binary search on the answer (the minimum day)
        while (left <= right) {
            int mid = left + (right - left) / 2;

            // Check if it's possible to make m bouquets by day mid
            if (canmake(bloomDay, mid, m, k)) {
                answer = mid;
                right = mid - 1;  // Try for a smaller day to check for minimum
            } else {
                left = mid + 1;  // Otherwise, try later days
            }
        }

        return answer;
    }

    private boolean canmake(int[] bloomDay, int days, int m, int k) {
        int flowers = 0;  // Count of consecutive flowers bloomed
        int bouquets = 0;  // Count of bouquets formed

        for (int bloom : bloomDay) {
            // If the flower blooms on or before the current day
            if (bloom <= days) {
                flowers++;
                // If we have enough flowers for one bouquet, reset flowers count
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;  // Reset flowers for the next bouquet
                }
            } else {
                flowers = 0;  // If the flower hasnâ€™t bloomed, reset flowers
            }
        }

        return bouquets >= m;  // Return if we can form at least m bouquets
    }
}

