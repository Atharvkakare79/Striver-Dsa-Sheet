----BRUTE FORCE----


class Solution {
    static Node segregate(Node head) {
          Node temp=head;
          int count0=0;
          int count1=0;
          int count2=0;
          
          while(temp!=null){
              if(temp.data==0){
                  count0++;
              }
              if(temp.data==1){
                  count1++;
              }
              else{
                  count2++;
              }
              temp=temp.next;
          }
          temp=head;
          while(temp!=null){
              if(count0>0){
                  temp.data=0;
                  count0--;
              }
              else if (count1>0){
                  temp.data=1;
                  count1--;
              }
              else if(count2>0){
                  temp.data=2;
                  count2--;
              }
              temp=temp.next;
          }
          return head;
        
    }
}



----OPTIMAL SOLUTION----



class Solution {
    static Node segregate(Node head) {
          Node temp=head;
          Node dummyzero=new Node(-1);
           Node dummyone=new Node(-1);
            Node dummytwo=new Node(-1);
            Node zero=dummyzero;
             Node one=dummyone;
              Node two=dummytwo;
            
            while(temp!=null){
                if(temp.data==0){
                    zero.next=temp;
                    zero=temp;
                }
                else if(temp.data==1){
                    one.next=temp;
                    one=temp;
                }
                else{
                    two.next=temp;
                    two=temp;
                }
                temp=temp.next;
            }
            zero.next=dummyone.next!=null?dummyone.next:dummytwo.next;
            one.next=dummytwo.next;
            two.next=null;
            
          return dummyzero.next;
        
    }
}
