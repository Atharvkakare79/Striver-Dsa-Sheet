----BRUTE FORCE----


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
       HashMap<ListNode,Integer>map=new HashMap<>();
       ListNode temp1=headA;
       while(temp1!=null){
        map.put(temp1,1);
            temp1=temp1.next;
        
    }   
        ListNode temp2=headB;
        while(temp2!=null){
        if(map.containsKey(temp2)){
            return temp2;
        }
        temp2=temp2.next;
    }    
        return null;
     }
}



----OPTIMAL SOLUTION----


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
       ListNode temp1=headA;
       ListNode temp2=headB;
       int count1=0;
       int count2=0;
       while(temp1!=null){
        count1++;
        temp1=temp1.next;
       }
       while(temp2!=null){
        count2++;
        temp2=temp2.next;
       }
       if(count2>count1){
        return collisionpoint(headA,headB,count2-count1);
       }
       else{
        return collisionpoint(headB,headA,count1-count2);
       }

    
     }
     public ListNode collisionpoint(ListNode temp1,ListNode temp2,int diff){
        while(diff>0){
            diff--;
            temp2=temp2.next;
        }
        while(temp1!=null && temp2!=null){
            if(temp1==temp2){
                return temp1;
            }
            temp1=temp1.next;
            temp2=temp2.next;
        }
        return null;
     }
}
