----BRUTE FORCE----

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] result=new int[nums1.length];
        for(int i=0;i<nums1.length;i++){
            boolean found=false;
            result[i]=-1;
            for(int j=0;j<nums2.length;j++){
                if(nums1[i]==nums2[j]){
                    found=true;
                }
                if(found && nums2[j]>nums1[i]){
                    result[i]=nums2[j];
                    break;
                }

            }
        }
        return result;
        
    }
}



----OPTIMAL SOLUTION----



class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] result=new int[nums1.length];
        HashMap<Integer,Integer>map=new HashMap<>();
        Stack<Integer>stack=new Stack();
        for (int i=0;i<nums2.length;i++){
           while(!stack.isEmpty() && stack.peek()<nums2[i]){
            map.put(stack.pop(),nums2[i]);

           }
           stack.push(nums2[i]);
        }

        for(int i=0;i<nums1.length;i++){
            result[i]=map.getOrDefault(nums1[i],-1);
        }
     return result;   
    }
}
