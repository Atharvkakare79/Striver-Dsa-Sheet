----BRUTE FORCE----

class Solution {
    public String longestPalindrome(String s) {
        String longest="";
        int n=s.length();

        for(int i=0;i<n;i++){
            for(int j=i+1;j<=n;j++){
                String substr=s.substring(i,j);
                if(ispalindrome(substr) && substr.length()>longest.length()){
                    longest=substr;
                }
            }
        }
        return longest;
        
    }
    public boolean ispalindrome(String str){
        int left=0;
        int right=str.length()-1;
        while(left<right){
        if(str.charAt(left++)!=str.charAt(right--)){
            return false;
        }
    }  
        return true;
    }
}




----OPTIMAL SOLUTION----



class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            // Odd length palindrome (center at i)
            int len1 = expandFromCenter(s, i, i);

            // Even length palindrome (center between i and i+1)
            int len2 = expandFromCenter(s, i, i + 1);

            int len = Math.max(len1, len2);

            // Update the longest palindrome boundaries
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        // Return the longest palindrome substring
        return s.substring(start, end + 1);
    }

    private int expandFromCenter(String s, int left, int right) {
        // Expand outwards while characters match
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }

        // length of palindrome is right - left - 1
        return right - left - 1;
    }
}

