----BRUTE FORCE----


class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        int count=0;
     
        for(int i=0;i<nums.length;i++){
              HashMap<Integer,Integer>map=new HashMap<>();
              int distinctcount=0;
            for(int j=i;j<nums.length;j++){
                map.put(nums[j],map.getOrDefault(nums[j],0)+1);

                if(map.get(nums[j])==1){
                    distinctcount++;
                }
                if(distinctcount==k){
                    count++;
                }
                else if (distinctcount > k) {
                    break; // more than k distinct â€” break
                }
            }

            }
           return count;  
        } 
       
    }



----OPTIMAL SOLUTION----



class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return (atmostk(nums,k)-atmostk(nums,k-1));

        } 
        public int atmostk(int nums[],int k){
            int left=0;
           
            int count=0;
            HashMap<Integer,Integer>map=new HashMap<>();
            for(int right=0;right<nums.length;right++){
                map.put(nums[right],map.getOrDefault(nums[right],0)+1);

                while(map.size()>k){
                    map.put(nums[left],map.get(nums[left])-1);
                    if(map.get(nums[left])==0){
                        map.remove(nums[left]);
                       
                    }
                     left++;
                }
                
               count += right - left + 1;
            }
            return count;
        }
    }

